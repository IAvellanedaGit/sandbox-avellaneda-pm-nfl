// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package model

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PredictScoreRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsPredictScoreRequest(buf []byte, offset flatbuffers.UOffsetT) *PredictScoreRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PredictScoreRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPredictScoreRequest(buf []byte, offset flatbuffers.UOffsetT) *PredictScoreRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PredictScoreRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PredictScoreRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PredictScoreRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PredictScoreRequest) Afc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PredictScoreRequest) Nfc() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func PredictScoreRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PredictScoreRequestAddAfc(builder *flatbuffers.Builder, afc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(afc), 0)
}
func PredictScoreRequestAddNfc(builder *flatbuffers.Builder, nfc flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(nfc), 0)
}
func PredictScoreRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
