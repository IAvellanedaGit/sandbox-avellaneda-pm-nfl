// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class TeamRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):TeamRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsTeamRequest(bb:flatbuffers.ByteBuffer, obj?:TeamRequest):TeamRequest {
  return (obj || new TeamRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsTeamRequest(bb:flatbuffers.ByteBuffer, obj?:TeamRequest):TeamRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new TeamRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

conference():string|null
conference(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
conference(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

team():string|null
team(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
team(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startTeamRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addConference(builder:flatbuffers.Builder, conferenceOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, conferenceOffset, 0);
}

static addTeam(builder:flatbuffers.Builder, teamOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, teamOffset, 0);
}

static endTeamRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createTeamRequest(builder:flatbuffers.Builder, conferenceOffset:flatbuffers.Offset, teamOffset:flatbuffers.Offset):flatbuffers.Offset {
  TeamRequest.startTeamRequest(builder);
  TeamRequest.addConference(builder, conferenceOffset);
  TeamRequest.addTeam(builder, teamOffset);
  return TeamRequest.endTeamRequest(builder);
}
}
