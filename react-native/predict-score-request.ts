// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from 'flatbuffers';

export class PredictScoreRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PredictScoreRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPredictScoreRequest(bb:flatbuffers.ByteBuffer, obj?:PredictScoreRequest):PredictScoreRequest {
  return (obj || new PredictScoreRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPredictScoreRequest(bb:flatbuffers.ByteBuffer, obj?:PredictScoreRequest):PredictScoreRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PredictScoreRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

afc():string|null
afc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
afc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

nfc():string|null
nfc(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
nfc(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPredictScoreRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addAfc(builder:flatbuffers.Builder, afcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, afcOffset, 0);
}

static addNfc(builder:flatbuffers.Builder, nfcOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nfcOffset, 0);
}

static endPredictScoreRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPredictScoreRequest(builder:flatbuffers.Builder, afcOffset:flatbuffers.Offset, nfcOffset:flatbuffers.Offset):flatbuffers.Offset {
  PredictScoreRequest.startPredictScoreRequest(builder);
  PredictScoreRequest.addAfc(builder, afcOffset);
  PredictScoreRequest.addNfc(builder, nfcOffset);
  return PredictScoreRequest.endPredictScoreRequest(builder);
}
}
